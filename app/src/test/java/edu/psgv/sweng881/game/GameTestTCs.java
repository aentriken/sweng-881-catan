package edu.psgv.sweng881.game;

import edu.psgv.sweng881.utils.TestUtils;
import org.junit.jupiter.params.provider.Arguments;

import java.util.List;
import java.util.stream.Stream;

import static edu.psgv.sweng881.utils.TestUtils.createPlayerTradeTestCaseArguments;

public class GameTestTCs {

    /**
     * Test case combinations for npc trades
     * @return Stream of Arguments
     */
    static Stream<Arguments> npcTradeCombos() {
        return Stream.of(
                Arguments.of(List.of(true, true, true, true, true, true),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 1, 3, 0, 2)), TestUtils.createPlayerHand(List.of(4, 1, 3, 0, 0)), 1),
                Arguments.of(List.of(true, false, false, false, false, false),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 2, 4, 1, 3)), TestUtils.createPlayerHand(List.of(0, 2, 4, 1, 1)), 1),
                Arguments.of(List.of(true, true, true, true, true, true),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 3, 0, 2, 4)), TestUtils.createPlayerHand(List.of(1, 3, 0, 0, 2)), 1),
                Arguments.of(List.of(true, false, false, false, false, false),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 4, 1, 3, 0)), TestUtils.createPlayerHand(List.of(2, 4, 1, 1, 3)), 1),
                Arguments.of(List.of(true, true, true, true, true, true),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 2, 4, 1)), TestUtils.createPlayerHand(List.of(3, 0, 0, 2, 4)), 1),
                Arguments.of(List.of(true, false, false, false, false, false),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 1, 3, 0, 2)), TestUtils.createPlayerHand(List.of(4, 1, 1, 3, 0)), 1),
                Arguments.of(List.of(true, true, true, true, true, true),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 2, 4, 1, 3)), TestUtils.createPlayerHand(List.of(0, 0, 2, 4, 1)), 1),
                Arguments.of(List.of(true, false, false, false, false, true),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 3, 0, 2, 4)), TestUtils.createPlayerHand(List.of(1, 1, 3, 0, 2)), 1),
                Arguments.of(List.of(true, true, true, false, false, false),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 3, 0, 0, 2)), TestUtils.createPlayerHand(List.of(4, 1, 3, 0, 2)), 1),
                Arguments.of(List.of(true, false, true, true, true, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 4, 1, 1, 3)), TestUtils.createPlayerHand(List.of(0, 2, 4, 1, 3)), 1),
                Arguments.of(List.of(true, true, false, false, false, false),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 0, 2, 4)), TestUtils.createPlayerHand(List.of(1, 3, 0, 2, 4)), 1),
                Arguments.of(List.of(true, true, true, true, true, true),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 1, 1, 3, 0)), TestUtils.createPlayerHand(List.of(2, 4, 1, 3, 0)), 1),
                Arguments.of(List.of(true, false, false, false, false, false),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 0, 2, 4, 1)), TestUtils.createPlayerHand(List.of(3, 0, 2, 4, 1)), 2),
                Arguments.of(List.of(true, true, true, false, false, false),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 0, 1, 0, 1)), TestUtils.createPlayerHand(List.of(2, 1, 2, 3, 2)), 2),
                Arguments.of(List.of(true, false, false, true, true, true),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 1, 2, 1, 2)), TestUtils.createPlayerHand(List.of(3, 2, 3, 4, 3)), 2),
                Arguments.of(List.of(true, true, true, false, false, true),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 2, 3, 2, 3)), TestUtils.createPlayerHand(List.of(4, 3, 4, 0, 4)), 1),
                Arguments.of(List.of(true, false, true, true, true, false),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 3, 4, 3, 4)), TestUtils.createPlayerHand(List.of(0, 4, 0, 1, 0)), 1),
                Arguments.of(List.of(true, true, false, false, false, true),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(3, 4, 0, 4, 0)), TestUtils.createPlayerHand(List.of(1, 0, 1, 0, 1)), 1),
                Arguments.of(List.of(true, false, true, true, true, false),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 2, 1, 2, 3)), TestUtils.createPlayerHand(List.of(2, 3, 4, 3, 4)), 2),
                Arguments.of(List.of(true, true, false, false, true, true),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 3, 2, 3, 4)), TestUtils.createPlayerHand(List.of(3, 4, 0, 4, 0)), 1),
                Arguments.of(List.of(true, false, false, false, true, true),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(4, 0, 4, 0, 1)), TestUtils.createPlayerHand(List.of(0, 1, 0, 1, 2)), 1),
                Arguments.of(List.of(true, true, true, true, false, false),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(0, 1, 0, 1, 0)), TestUtils.createPlayerHand(List.of(1, 2, 1, 2, 3)), 2),
                Arguments.of(List.of(true, true, true, true, false, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 1, 2, 3, 2)), TestUtils.createPlayerHand(List.of(3, 4, 3, 4, 0)), 1),
                Arguments.of(List.of(true, false, false, true, true, true),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(3, 2, 3, 4, 3)), TestUtils.createPlayerHand(List.of(4, 0, 4, 0, 1)), 1),
                Arguments.of(List.of(false, false, true, true, false, false),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 2, 2, 4, 1)), TestUtils.createPlayerHand(List.of(1, 3, 3, 0, 0)), 1),
                Arguments.of(List.of(false, true, false, false, true, true),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 3, 3, 0, 0)), TestUtils.createPlayerHand(List.of(2, 4, 4, 1, 1)), 2),
                Arguments.of(List.of(false, false, true, true, false, false),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 4, 4, 1, 1)), TestUtils.createPlayerHand(List.of(3, 0, 0, 2, 2)), 1),
                Arguments.of(List.of(false, true, true, false, true, true),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 0, 2, 2)), TestUtils.createPlayerHand(List.of(4, 1, 1, 3, 3)), 2),
                Arguments.of(List.of(false, false, false, true, false, false),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 1, 1, 3, 3)), TestUtils.createPlayerHand(List.of(0, 0, 2, 4, 4)), 1),
                Arguments.of(List.of(false, true, true, false, false, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 2, 4, 1, 1)), TestUtils.createPlayerHand(List.of(3, 3, 0, 0, 2)), 1),
                Arguments.of(List.of(false, false, false, true, true, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 3, 0, 0, 2)), TestUtils.createPlayerHand(List.of(4, 4, 1, 1, 3)), 2),
                Arguments.of(List.of(false, true, false, true, true, false),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 0, 2, 2, 4)), TestUtils.createPlayerHand(List.of(1, 1, 3, 3, 0)), 1),
                Arguments.of(List.of(false, false, true, false, false, true),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 1, 3, 3, 0)), TestUtils.createPlayerHand(List.of(0, 2, 4, 4, 1)), 1),
                Arguments.of(List.of(false, true, false, false, true, false),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(2, 4, 1, 1, 3)), TestUtils.createPlayerHand(List.of(3, 0, 0, 2, 4)), 1),
                Arguments.of(List.of(false, false, true, true, false, true),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(3, 0, 0, 2, 4)), TestUtils.createPlayerHand(List.of(4, 1, 1, 3, 0)), 1),
                Arguments.of(List.of(true, false, true, true, true, false),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 0, 3, 4, 2)), TestUtils.createPlayerHand(List.of(3, 1, 2, 0, 1)), 1),
                Arguments.of(List.of(true, true, false, false, true, true),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 1, 4, 0, 3)), TestUtils.createPlayerHand(List.of(4, 2, 3, 1, 2)), 1),
                Arguments.of(List.of(true, false, true, true, false, false),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 2, 0, 1, 4)), TestUtils.createPlayerHand(List.of(0, 3, 4, 2, 3)), 1),
                Arguments.of(List.of(true, false, true, true, false, false),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 4, 0, 3, 1)), TestUtils.createPlayerHand(List.of(2, 0, 1, 4, 0)), 1),
                Arguments.of(List.of(true, true, false, false, true, true),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(4, 2, 3, 1, 2)), TestUtils.createPlayerHand(List.of(0, 1, 4, 0, 3)), 1),
                Arguments.of(List.of(true, true, true, true, false, false),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(0, 3, 4, 2, 3)), TestUtils.createPlayerHand(List.of(1, 2, 0, 1, 4)), 1),
                Arguments.of(List.of(true, true, true, false, false, true),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 0, 1, 4, 0)), TestUtils.createPlayerHand(List.of(3, 4, 2, 3, 1)), 1),
                Arguments.of(List.of(true, false, false, true, true, false),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 1, 2, 0, 1)), TestUtils.createPlayerHand(List.of(4, 0, 3, 4, 2)), 1),
                Arguments.of(List.of(true, false, false, true, true, false),  2, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(2, 3, 1, 2, 0)), TestUtils.createPlayerHand(List.of(1, 4, 0, 3, 1)), 1),
                Arguments.of(List.of(false, false, false, true, true, false),  4, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 3, 0, 4, 1)), TestUtils.createPlayerHand(List.of(0, 2, 1, 3, 0)), 1),
                Arguments.of(List.of(false, true, true, false, false, true),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 1, 3, 0, 4)), TestUtils.createPlayerHand(List.of(1, 0, 2, 1, 3)), 1),
                Arguments.of(List.of(false, false, false, true, true, false),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 4, 1, 0)), TestUtils.createPlayerHand(List.of(2, 1, 3, 2, 4)), 1),
                Arguments.of(List.of(false, true, true, false, false, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 1, 0, 2, 1)), TestUtils.createPlayerHand(List.of(3, 2, 4, 3, 0)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 2, 1, 3, 2)), TestUtils.createPlayerHand(List.of(4, 3, 0, 4, 1)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 3, 2, 4, 3)), TestUtils.createPlayerHand(List.of(0, 4, 1, 0, 2)), 1),
                Arguments.of(List.of(false, true, false, false, true, true),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 4, 3, 0, 4)), TestUtils.createPlayerHand(List.of(1, 0, 2, 1, 3)), 1),
                Arguments.of(List.of(false, false, true, true, false, false),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 4, 1, 0, 2)), TestUtils.createPlayerHand(List.of(1, 3, 2, 4, 3)), 1),
                Arguments.of(List.of(false, true, false, false, true, true),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 0, 2, 1, 3)), TestUtils.createPlayerHand(List.of(2, 4, 3, 0, 4)), 1),
                Arguments.of(List.of(false, false, true, true, true, false),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 1, 3, 2, 4)), TestUtils.createPlayerHand(List.of(3, 0, 4, 1, 0)), 1),
                Arguments.of(List.of(false, true, true, false, false, true),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 2, 4, 3, 0)), TestUtils.createPlayerHand(List.of(4, 1, 0, 2, 1)), 1),
                Arguments.of(List.of(true, true, false, false, true, true),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(2, 0, 0, 3, 1)), TestUtils.createPlayerHand(List.of(1, 4, 4, 2, 0)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(3, 1, 1, 4, 2)), TestUtils.createPlayerHand(List.of(2, 0, 0, 3, 1)), 1),
                Arguments.of(List.of(true, true, false, false, true, false),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(4, 2, 0, 0, 3)), TestUtils.createPlayerHand(List.of(3, 1, 1, 4, 2)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 3, 1, 1, 4)), TestUtils.createPlayerHand(List.of(4, 2, 0, 0, 3)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 4, 2, 2, 0)), TestUtils.createPlayerHand(List.of(0, 3, 1, 1, 4)), 1),
                Arguments.of(List.of(true, false, true, false, false, true),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 0, 3, 3, 1)), TestUtils.createPlayerHand(List.of(1, 4, 2, 2, 0)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 1, 4, 4, 2)), TestUtils.createPlayerHand(List.of(0, 0, 3, 3, 1)), 1),
                Arguments.of(List.of(true, true, true, false, false, true),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(2, 2, 0, 0, 3)), TestUtils.createPlayerHand(List.of(1, 1, 4, 4, 2)), 1),
                Arguments.of(List.of(true, false, false, true, true, false),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 3, 1, 1, 4)), TestUtils.createPlayerHand(List.of(2, 2, 0, 0, 3)), 1),
                Arguments.of(List.of(true, true, true, false, false, true),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 4, 2, 0, 0)), TestUtils.createPlayerHand(List.of(3, 3, 1, 1, 4)), 1),
                Arguments.of(List.of(true, false, false, true, true, false),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 0, 3, 1, 1)), TestUtils.createPlayerHand(List.of(4, 4, 2, 0, 0)), 1),
                Arguments.of(List.of(true, true, true, false, true, true),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 1, 4, 2, 2)), TestUtils.createPlayerHand(List.of(0, 0, 3, 1, 1)), 1),
                Arguments.of(List.of(true, false, false, true, false, false),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(2, 0, 0, 3, 3)), TestUtils.createPlayerHand(List.of(1, 1, 4, 2, 2)), 1),
                Arguments.of(List.of(true, true, true, false, true, true),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 1, 1, 4, 4)), TestUtils.createPlayerHand(List.of(2, 0, 0, 3, 3)), 1),
                Arguments.of(List.of(true, false, true, true, false, false),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 2, 2, 0, 0)), TestUtils.createPlayerHand(List.of(3, 1, 1, 4, 4)), 1),
                Arguments.of(List.of(true, true, false, false, true, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 3, 3, 1, 1)), TestUtils.createPlayerHand(List.of(4, 2, 2, 0, 0)), 1),
                Arguments.of(List.of(true, false, true, true, false, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 4, 4, 2, 0)), TestUtils.createPlayerHand(List.of(0, 3, 3, 1, 1)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(3, 4, 3, 2, 3)), TestUtils.createPlayerHand(List.of(2, 1, 2, 1, 0)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 0, 4, 3, 4)), TestUtils.createPlayerHand(List.of(3, 2, 3, 2, 1)), 1),
                Arguments.of(List.of(false, false, false, false, true, true),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 1, 0, 4, 0)), TestUtils.createPlayerHand(List.of(4, 3, 4, 3, 2)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 0, 1, 0, 1)), TestUtils.createPlayerHand(List.of(0, 4, 0, 4, 3)), 1),
                Arguments.of(List.of(false, false, false, false, true, true),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 1, 2, 1, 0)), TestUtils.createPlayerHand(List.of(1, 0, 1, 0, 4)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(3, 2, 3, 2, 1)), TestUtils.createPlayerHand(List.of(2, 1, 0, 1, 0)), 1),
                Arguments.of(List.of(false, true, false, false, true, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 3, 4, 3, 2)), TestUtils.createPlayerHand(List.of(3, 2, 1, 2, 1)), 1),
                Arguments.of(List.of(false, false, true, true, true, false),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 4, 0, 4, 3)), TestUtils.createPlayerHand(List.of(4, 3, 2, 3, 2)), 1),
                Arguments.of(List.of(false, true, false, false, false, true),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 0, 1, 0, 4)), TestUtils.createPlayerHand(List.of(0, 4, 3, 4, 3)), 1),
                Arguments.of(List.of(false, false, true, true, true, false),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 1, 0, 1, 0)), TestUtils.createPlayerHand(List.of(1, 0, 4, 0, 4)), 1),
                Arguments.of(List.of(false, true, false, false, false, true),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(3, 2, 1, 2, 1)), TestUtils.createPlayerHand(List.of(0, 1, 0, 1, 0)), 1),
                Arguments.of(List.of(false, false, true, true, true, false),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(4, 3, 2, 3, 2)), TestUtils.createPlayerHand(List.of(1, 2, 1, 0, 1)), 1),
                Arguments.of(List.of(false, true, true, false, false, true),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(0, 4, 3, 4, 3)), TestUtils.createPlayerHand(List.of(2, 3, 2, 1, 2)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 0, 4, 0, 4)), TestUtils.createPlayerHand(List.of(3, 4, 3, 2, 3)), 1),
                Arguments.of(List.of(false, true, true, false, false, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 1, 0, 1, 0)), TestUtils.createPlayerHand(List.of(4, 0, 4, 3, 4)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 2, 1, 0, 1)), TestUtils.createPlayerHand(List.of(0, 1, 0, 4, 0)), 1),
                Arguments.of(List.of(false, true, true, false, false, false),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 3, 2, 1, 2)), TestUtils.createPlayerHand(List.of(1, 0, 1, 0, 1)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 1, 1, 3, 3)), TestUtils.createPlayerHand(List.of(3, 0, 0, 0, 0)), 1),
                Arguments.of(List.of(true, false, true, false, false, true),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 2, 2, 4, 4)), TestUtils.createPlayerHand(List.of(4, 1, 1, 1, 1)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 3, 3, 0, 0)), TestUtils.createPlayerHand(List.of(0, 0, 2, 2, 2)), 1),
                Arguments.of(List.of(true, false, true, false, true, true),  4, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 4, 4, 1, 1)), TestUtils.createPlayerHand(List.of(1, 1, 3, 3, 3)), 1),
                Arguments.of(List.of(true, true, false, true, false, false),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 0, 0, 0, 2)), TestUtils.createPlayerHand(List.of(2, 2, 4, 4, 4)), 2),
                Arguments.of(List.of(true, true, true, false, true, true),  2, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 1, 1, 1, 3)), TestUtils.createPlayerHand(List.of(3, 3, 0, 0, 0)), 1),
                Arguments.of(List.of(true, false, false, true, false, false),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 2, 2, 2, 4)), TestUtils.createPlayerHand(List.of(4, 4, 1, 1, 1)), 1),
                Arguments.of(List.of(true, true, true, false, true, true),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 3, 3, 3, 0)), TestUtils.createPlayerHand(List.of(0, 0, 0, 2, 2)), 1),
                Arguments.of(List.of(true, false, false, true, false, true),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(2, 4, 4, 4, 1)), TestUtils.createPlayerHand(List.of(1, 1, 1, 3, 3)), 1),
                Arguments.of(List.of(true, true, true, false, true, false),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(3, 0, 0, 0, 0)), TestUtils.createPlayerHand(List.of(2, 2, 2, 4, 4)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(4, 1, 1, 1, 1)), TestUtils.createPlayerHand(List.of(3, 3, 3, 0, 0)), 1),
                Arguments.of(List.of(true, true, false, false, true, false),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 0, 2, 2, 2)), TestUtils.createPlayerHand(List.of(4, 4, 4, 1, 1)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 1, 3, 3, 3)), TestUtils.createPlayerHand(List.of(0, 0, 0, 0, 2)), 1),
                Arguments.of(List.of(true, true, false, false, true, false),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(2, 2, 4, 4, 4)), TestUtils.createPlayerHand(List.of(1, 1, 1, 1, 3)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(3, 3, 0, 0, 0)), TestUtils.createPlayerHand(List.of(0, 2, 2, 2, 4)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(4, 4, 1, 1, 1)), TestUtils.createPlayerHand(List.of(1, 3, 3, 3, 0)), 1),
                Arguments.of(List.of(true, false, true, false, false, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 0, 0, 2, 2)), TestUtils.createPlayerHand(List.of(2, 4, 4, 4, 1)), 1),
                Arguments.of(List.of(false, false, false, false, false, true),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 0, 1, 2, 3)), TestUtils.createPlayerHand(List.of(1, 2, 3, 4, 0)), 1),
                Arguments.of(List.of(false, true, true, true, true, false),  4, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(3, 1, 2, 3, 4)), TestUtils.createPlayerHand(List.of(0, 3, 4, 0, 1)), 1),
                Arguments.of(List.of(false, false, false, false, false, true),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(4, 0, 3, 4, 0)), TestUtils.createPlayerHand(List.of(1, 4, 0, 1, 2)), 1),
                Arguments.of(List.of(false, true, true, true, true, true),  2, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(0, 1, 4, 0, 1)), TestUtils.createPlayerHand(List.of(2, 0, 1, 2, 3)), 1),
                Arguments.of(List.of(false, true, false, false, false, false),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 2, 0, 1, 2)), TestUtils.createPlayerHand(List.of(3, 1, 2, 3, 4)), 1),
                Arguments.of(List.of(false, false, true, true, true, true),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 3, 1, 2, 3)), TestUtils.createPlayerHand(List.of(4, 0, 3, 4, 0)), 1),
                Arguments.of(List.of(false, true, false, false, false, false),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(3, 4, 0, 3, 4)), TestUtils.createPlayerHand(List.of(0, 1, 4, 0, 1)), 1),
                Arguments.of(List.of(false, false, true, true, true, true),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(4, 0, 1, 4, 0)), TestUtils.createPlayerHand(List.of(1, 2, 0, 1, 2)), 1),
                Arguments.of(List.of(false, true, true, false, false, false),  2, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(0, 1, 2, 0, 1)), TestUtils.createPlayerHand(List.of(2, 3, 1, 2, 3)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 2, 3, 1, 2)), TestUtils.createPlayerHand(List.of(3, 4, 0, 3, 4)), 1),
                Arguments.of(List.of(false, true, true, false, false, false),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(2, 3, 4, 0, 3)), TestUtils.createPlayerHand(List.of(4, 0, 1, 4, 0)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 4, 0, 1, 4)), TestUtils.createPlayerHand(List.of(0, 1, 2, 0, 1)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 0, 1, 2, 0)), TestUtils.createPlayerHand(List.of(1, 2, 3, 1, 2)), 1),
                Arguments.of(List.of(false, false, false, false, true, true),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 1, 2, 3, 1)), TestUtils.createPlayerHand(List.of(2, 3, 4, 0, 3)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 2, 3, 4, 0)), TestUtils.createPlayerHand(List.of(3, 4, 0, 1, 4)), 1),
                Arguments.of(List.of(false, false, false, false, true, true),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(0, 3, 4, 0, 1)), TestUtils.createPlayerHand(List.of(4, 0, 1, 2, 0)), 1),
                Arguments.of(List.of(false, true, true, true, true, false),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 4, 0, 1, 2)), TestUtils.createPlayerHand(List.of(0, 1, 2, 3, 1)), 1),
                Arguments.of(List.of(true, true, false, true, false, true),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 2, 4, 1, 0)), TestUtils.createPlayerHand(List.of(2, 4, 1, 3, 0)), 1),
                Arguments.of(List.of(true, false, true, false, true, false),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 3, 0, 2, 1)), TestUtils.createPlayerHand(List.of(3, 0, 2, 4, 1)), 1),
                Arguments.of(List.of(true, true, false, true, false, true),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 4, 1, 3, 0)), TestUtils.createPlayerHand(List.of(4, 1, 3, 0, 2)), 1),
                Arguments.of(List.of(true, true, true, false, true, false),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 2, 4, 1)), TestUtils.createPlayerHand(List.of(0, 2, 4, 1, 3)), 1),
                Arguments.of(List.of(true, false, false, true, false, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 1, 3, 0, 2)), TestUtils.createPlayerHand(List.of(1, 3, 0, 2, 4)), 1),
                Arguments.of(List.of(true, true, true, false, true, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 2, 4, 1, 3)), TestUtils.createPlayerHand(List.of(0, 4, 1, 3, 0)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 3, 0, 2, 4)), TestUtils.createPlayerHand(List.of(1, 0, 2, 4, 1)), 1),
                Arguments.of(List.of(true, true, false, false, true, false),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 4, 1, 3, 0)), TestUtils.createPlayerHand(List.of(2, 1, 3, 0, 2)), 1),
                Arguments.of(List.of(true, false, true, true, false, true),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 0, 2, 4, 1)), TestUtils.createPlayerHand(List.of(3, 0, 4, 1, 3)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 1, 3, 0, 2)), TestUtils.createPlayerHand(List.of(4, 1, 0, 2, 4)), 1),
                Arguments.of(List.of(true, false, true, false, false, true),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 4, 1, 3)), TestUtils.createPlayerHand(List.of(0, 2, 1, 3, 0)), 1),
                Arguments.of(List.of(true, true, false, true, true, false),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 1, 0, 2, 4)), TestUtils.createPlayerHand(List.of(1, 3, 0, 4, 1)), 1),
                Arguments.of(List.of(true, false, true, false, true, true),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(0, 2, 1, 3, 0)), TestUtils.createPlayerHand(List.of(2, 4, 1, 0, 2)), 1),
                Arguments.of(List.of(true, true, false, true, false, false),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(1, 3, 0, 4, 1)), TestUtils.createPlayerHand(List.of(3, 0, 2, 1, 3)), 1),
                Arguments.of(List.of(true, false, true, false, true, true),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 4, 1, 0, 2)), TestUtils.createPlayerHand(List.of(4, 1, 3, 0, 4)), 1),
                Arguments.of(List.of(true, true, false, true, false, true),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(3, 0, 2, 1, 3)), TestUtils.createPlayerHand(List.of(0, 2, 4, 1, 0)), 1),
                Arguments.of(List.of(true, false, true, false, true, false),  4, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(4, 1, 3, 0, 4)), TestUtils.createPlayerHand(List.of(1, 3, 0, 2, 1)), 1),
                Arguments.of(List.of(false, false, false, false, false, false),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 1, 4, 2, 0)), TestUtils.createPlayerHand(List.of(3, 1, 4, 2, 0)), 2),
                Arguments.of(List.of(false, true, true, true, true, true),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(2, 0, 0, 3, 1)), TestUtils.createPlayerHand(List.of(4, 2, 0, 3, 1)), 2),
                Arguments.of(List.of(false, true, false, false, false, false),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 1, 1, 4, 2)), TestUtils.createPlayerHand(List.of(0, 3, 1, 4, 2)), 1),
                Arguments.of(List.of(false, false, true, true, true, true),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 2, 0, 0, 3)), TestUtils.createPlayerHand(List.of(1, 4, 2, 0, 3)), 1),
                Arguments.of(List.of(false, true, true, false, false, false),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 3, 1, 1, 4)), TestUtils.createPlayerHand(List.of(2, 0, 3, 1, 4)), 1),
                Arguments.of(List.of(false, false, false, true, true, true),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 4, 2, 0, 0)), TestUtils.createPlayerHand(List.of(3, 1, 4, 2, 0)), 1),
                Arguments.of(List.of(false, true, true, true, false, false),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(2, 0, 3, 1, 1)), TestUtils.createPlayerHand(List.of(4, 2, 0, 3, 1)), 1),
                Arguments.of(List.of(false, false, false, false, true, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 1, 4, 2, 0)), TestUtils.createPlayerHand(List.of(0, 3, 1, 4, 2)), 1),
                Arguments.of(List.of(false, true, true, true, true, false),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 2, 0, 3, 1)), TestUtils.createPlayerHand(List.of(1, 4, 2, 0, 3)), 1),
                Arguments.of(List.of(false, false, false, false, false, true),  3, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 3, 1, 4, 2)), TestUtils.createPlayerHand(List.of(0, 0, 3, 1, 4)), 1),
                Arguments.of(List.of(false, true, true, true, true, true),  4, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(1, 4, 2, 0, 3)), TestUtils.createPlayerHand(List.of(1, 1, 4, 2, 0)), 1),
                Arguments.of(List.of(false, false, false, false, false, false),  1, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(2, 0, 3, 1, 4)), TestUtils.createPlayerHand(List.of(2, 0, 0, 3, 1)), 1),
                Arguments.of(List.of(false, true, true, true, true, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(3, 1, 4, 2, 0)), TestUtils.createPlayerHand(List.of(3, 1, 1, 4, 2)), 1),
                Arguments.of(List.of(false, false, false, false, false, false),  2, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(4, 2, 0, 3, 1)), TestUtils.createPlayerHand(List.of(4, 2, 0, 0, 3)), 1),
                Arguments.of(List.of(false, true, true, true, true, true),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(0, 3, 1, 4, 2)), TestUtils.createPlayerHand(List.of(0, 3, 1, 1, 4)), 1),
                Arguments.of(List.of(false, false, false, false, false, false),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(1, 4, 2, 0, 3)), TestUtils.createPlayerHand(List.of(1, 4, 2, 0, 0)), 1),
                Arguments.of(List.of(false, true, true, true, true, true),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(0, 0, 3, 1, 4)), TestUtils.createPlayerHand(List.of(2, 0, 3, 1, 1)), 1),
                Arguments.of(List.of(true, true, false, true, false, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 3, 2, 1, 0)), TestUtils.createPlayerHand(List.of(4, 3, 2, 1, 0)), 2),
                Arguments.of(List.of(true, true, true, false, true, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 4, 3, 2, 1)), TestUtils.createPlayerHand(List.of(0, 4, 3, 2, 1)), 2),
                Arguments.of(List.of(true, false, true, true, false, true),  2, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 0, 4, 3, 2)), TestUtils.createPlayerHand(List.of(1, 0, 4, 3, 2)), 2),
                Arguments.of(List.of(true, true, false, true, true, false),  3, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 1, 0, 4, 3)), TestUtils.createPlayerHand(List.of(2, 1, 0, 4, 3)), 2),
                Arguments.of(List.of(true, false, true, false, true, true),  4, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(3, 2, 1, 0, 4)), TestUtils.createPlayerHand(List.of(3, 2, 1, 0, 4)), 2),
                Arguments.of(List.of(true, true, false, true, false, true),  1, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 3, 2, 1, 0)), TestUtils.createPlayerHand(List.of(4, 3, 2, 1, 0)), 2),
                Arguments.of(List.of(true, false, true, false, true, false),  1, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 4, 3, 2, 1)), TestUtils.createPlayerHand(List.of(0, 4, 3, 2, 1)), 2),
                Arguments.of(List.of(true, true, false, true, false, true),  2, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(1, 0, 4, 3, 2)), TestUtils.createPlayerHand(List.of(1, 0, 4, 3, 2)), 2),
                Arguments.of(List.of(true, false, true, false, true, false),  3, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 1, 0, 4, 3)), TestUtils.createPlayerHand(List.of(2, 1, 0, 4, 3)), 2),
                Arguments.of(List.of(true, true, false, true, false, true),  4, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 0, 1, 0, 4)), TestUtils.createPlayerHand(List.of(3, 2, 1, 0, 4)), 2),
                Arguments.of(List.of(true, false, true, false, true, false),  1, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 1, 0, 1, 0)), TestUtils.createPlayerHand(List.of(4, 3, 2, 1, 0)), 2),
                Arguments.of(List.of(true, true, false, true, false, true),  2, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(3, 2, 1, 0, 1)), TestUtils.createPlayerHand(List.of(0, 4, 3, 2, 1)), 1),
                Arguments.of(List.of(true, false, true, false, true, false),  3, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(4, 3, 2, 1, 0)), TestUtils.createPlayerHand(List.of(1, 0, 4, 3, 2)), 1),
                Arguments.of(List.of(true, true, false, true, false, true),  4, TestUtils.Resource.WOOL, TestUtils.createCardsGiven(List.of(0, 4, 3, 2, 1)), TestUtils.createPlayerHand(List.of(0, 1, 0, 4, 3)), 1),
                Arguments.of(List.of(true, false, true, false, true, false),  1, TestUtils.Resource.ORE, TestUtils.createCardsGiven(List.of(1, 0, 4, 3, 2)), TestUtils.createPlayerHand(List.of(1, 0, 1, 0, 4)), 1),
                Arguments.of(List.of(true, true, false, true, false, true),  2, TestUtils.Resource.GRAIN, TestUtils.createCardsGiven(List.of(2, 1, 0, 4, 3)), TestUtils.createPlayerHand(List.of(2, 1, 0, 1, 0)), 1),
                Arguments.of(List.of(true, false, true, false, true, false),  3, TestUtils.Resource.LUMBER, TestUtils.createCardsGiven(List.of(3, 2, 1, 0, 4)), TestUtils.createPlayerHand(List.of(3, 2, 1, 0, 1)), 1),
                Arguments.of(List.of(true, true, true, true, true, true),  4, TestUtils.Resource.BRICK, TestUtils.createCardsGiven(List.of(2, 0, 0, 0, 0)), TestUtils.createPlayerHand(List.of(2, 0, 0, 0, 0)), 0)
        );
    }

    /**
     * Creates test cases to feed into shouldTestPlayerTrade
     * @return Stream of Arguments
     */
    static Stream<Arguments> playerTradeTestCases() {
        return Stream.of(
                createPlayerTradeTestCaseArguments(2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 1, 2, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 0, 2, 1, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 2, 1, 0, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, true),
                createPlayerTradeTestCaseArguments(0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, true),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, true),
                createPlayerTradeTestCaseArguments(2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, true),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, true),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, true),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, false),
                createPlayerTradeTestCaseArguments(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, false),
                createPlayerTradeTestCaseArguments(1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, false),
                createPlayerTradeTestCaseArguments(1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, false),
                createPlayerTradeTestCaseArguments(2, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, false),
                createPlayerTradeTestCaseArguments(2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, false),
                createPlayerTradeTestCaseArguments(2, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 0, false),
                createPlayerTradeTestCaseArguments(0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, false),
                createPlayerTradeTestCaseArguments(0, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, false),
                createPlayerTradeTestCaseArguments(0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, false)
        );
    }

    // Method providing test data for different victory points scenarios
    static Stream<Arguments> victoryPointsTestData() {
        return Stream.of(
                Arguments.of(0, 9, false),   // Player 0 has less than 10 victory points
                Arguments.of(1, 10, true),   // Player 1 has exactly 10 victory points
                Arguments.of(2, 11, true)    // Player 2 has more than 10 victory points
        );
    }

    /**
     * Test case combinations for buying a development card
     * @return Stream of Arguments
     */
    static Stream<Arguments> buyDevCardCombos() {
        return Stream.of(
                Arguments.of(-1, -1, -1, true, 1),  // Negative/Insufficient resources and empty deck
                Arguments.of(0, 0, 0, false, 1),    // Insufficient resources
                Arguments.of(2, 3, 2, false, 0),     // Sufficient resources
                Arguments.of(2, 3, 2, true, 2)     // Sufficient resources but empty deck
        );
    }

    static Stream<Arguments> takeAllTestCases() {
        return Stream.of(
                Arguments.of(TestUtils.Resource.BRICK, 0, 0, 0, 0, 1, 0),
                Arguments.of(TestUtils.Resource.BRICK, 1, 1, 1, 1, 2, 4),
                Arguments.of(TestUtils.Resource.BRICK, 0, 0, 0, 0, 3, 0),
                Arguments.of(TestUtils.Resource.BRICK, 1, 1, 1, 1, 4, 4),
                Arguments.of(TestUtils.Resource.WOOL, 0, 1, 0, 0, 2, 1),
                Arguments.of(TestUtils.Resource.WOOL, 1, 0, 0, 1, 3, 2),
                Arguments.of(TestUtils.Resource.WOOL, 0, 0, 1, 0, 4, 1),
                Arguments.of(TestUtils.Resource.WOOL, 0, 1, 0, 1, 1, 2),
                Arguments.of(TestUtils.Resource.ORE, 1, 0, 0, 0, 2, 1),
                Arguments.of(TestUtils.Resource.ORE, 0, 1, 1, 0, 3, 2),
                Arguments.of(TestUtils.Resource.ORE, 0, 0, 0, 1, 4, 1),
                Arguments.of(TestUtils.Resource.ORE, 1, 1, 0, 0, 1, 2),
                Arguments.of(TestUtils.Resource.GRAIN, 0, 0, 0, 1, 2, 1),
                Arguments.of(TestUtils.Resource.GRAIN, 0, 1, 1, 0, 3, 2),
                Arguments.of(TestUtils.Resource.GRAIN, 1, 0, 0, 0, 4, 1),
                Arguments.of(TestUtils.Resource.GRAIN, 0, 0, 1, 1, 1, 2),
                Arguments.of(TestUtils.Resource.LUMBER, 0, 1, 0, 1, 1, 2),
                Arguments.of(TestUtils.Resource.LUMBER, 0, 0, 1, 0, 2, 1),
                Arguments.of(TestUtils.Resource.LUMBER, 1, 0, 0, 1, 3, 2),
                Arguments.of(TestUtils.Resource.LUMBER, 0, 1, 0, 0, 4, 1),
                Arguments.of(TestUtils.Resource.LUMBER, 1, 0, 1, 0, 1, 2)
                );
    }

    static Stream<Arguments> takeCardTestCases() {
        return Stream.of(
                Arguments.of(0,0,0,0,0,0,0,0,0,0, 0, 0),
                Arguments.of(0,1,1,1,1,1,1,1,1,1, 5, 4),
                Arguments.of(0,2,2,2,2,2,2,2,2,2, 9, 9),
                Arguments.of(1,1,2,0,1,2,0,1,2,0, 6, 4),
                Arguments.of(1,2,0,1,2,0,1,2,0,1, 7, 3),
                Arguments.of(1,0,1,2,0,1,2,0,1,2, 5, 5),
                Arguments.of(2,2,1,0,2,1,0,2,1,0, 8, 3),
                Arguments.of(2,0,2,1,0,2,1,0,2,1, 6, 5),
                Arguments.of(2,1,0,2,1,0,2,1,0,2, 7, 4)
        );
    }

    /**
     * Test case combinations for victory points
     * @return Stream of Arguments
     */
    static Stream<Arguments> victoryPointCombos() {
        return Stream.of(
                Arguments.of(List.of(2, 5, 8, 10), true),
                Arguments.of(List.of(2, 4, 6, 9), false)
        );
    }

    /**
     * Stream of Arguments that represent the various test cases for placeRoad()
     * @return Stream of Arguments
     */
    static Stream<Arguments> placeRoadTestCases() {
        return Stream.of(

                TestUtils.createTestCase(3, 4, 1, 4, false, false, true, true, true, true, true, true),
                TestUtils.createTestCase(7, 7, 0, 3, true, false, true, true, false, true, true, false),
                TestUtils.createTestCase(7, 7, 1, 4, false, true, false, false, true, false, false, false),
                TestUtils.createTestCase(7, 7, 1, 2, true, false, false, true, false, false, true, false),
                TestUtils.createTestCase(7, 7, 2, 3, false, true, true, false, true, true, false, false),
                TestUtils.createTestCase(7, 7, 1, 1, false, false, true, false, false, true, false, false),
                TestUtils.createTestCase(3, 4, 1, 1, false, false, true, true, false, false, true, true),
                TestUtils.createTestCase(3, 4, 2, 1, true, true, false, false, true, true, false, false),
                TestUtils.createTestCase(3, 4, 0, 2, false, true, true, true, false, false, true, true),
                TestUtils.createTestCase(3, 4, 2, 4, false, true, true, false, false, true, true, true),
                TestUtils.createTestCase(3, 4, 0, 1, true, false, false, true, true, false, false, false),
                TestUtils.createTestCase(3, 4, 2, 3, false, false, true, true, true, false, false, true),
                TestUtils.createTestCase(3, 4, 0, 4, true, true, false, false, true, true, true, false),
                TestUtils.createTestCase(7, 7, 2, 2, true, true, false, false, true, true, true, false),
                TestUtils.createTestCase(7, 7, 2, 1, true, false, false, true, true, false, false, false),
                TestUtils.createTestCase(7, 7, 0, 2, false, true, true, false, false, true, true, false),
                TestUtils.createTestCase(7, 7, 1, 3, true, false, false, true, true, true, false, false),
                TestUtils.createTestCase(7, 7, 2, 4, false, true, true, true, false, false, true, false),
                TestUtils.createTestCase(7, 7, 0, 1, true, true, false, false, true, true, false, false),
                TestUtils.createTestCase(7, 7, 1, 1, false, false, true, true, false, false, true, false),
                TestUtils.createTestCase(3, 4, 0, 4, true, true, false, true, true, false, true, false),
                TestUtils.createTestCase(3, 4, 1, 1, false, false, true, false, false, true, false, true),
                TestUtils.createTestCase(3, 4, 2, 2, true, true, false, true, true, false, true, false),
                TestUtils.createTestCase(3, 4, 0, 3, false, true, true, false, true, true, false, true),
                TestUtils.createTestCase(3, 4, 1, 4, true, false, false, true, false, false, true, false),
                TestUtils.createTestCase(3, 4, 2, 1, false, true, true, false, true, true, false, true),
                TestUtils.createTestCase(3, 4, 0, 1, true, false, true, true, false, true, true, false),
                TestUtils.createTestCase(3, 4, 1, 2, false, true, false, false, true, false, false, true),
                TestUtils.createTestCase(3, 4, 2, 3, true, false, true, true, false, true, true, false),
                TestUtils.createTestCase(7, 7, 1, 2, false, false, true, true, true, true, true, false),
                TestUtils.createTestCase(7, 7, 2, 3, true, true, true, false, false, false, false, false),
                TestUtils.createTestCase(7, 7, 0, 4, false, false, false, true, true, true, true, false),
                TestUtils.createTestCase(7, 7, 1, 1, true, true, true, true, false, false, false, false),
                TestUtils.createTestCase(7, 7, 2, 1, false, false, false, false, true, true, true, false),
                TestUtils.createTestCase(7, 7, 0, 2, true, true, true, true, true, false, false, false),
                TestUtils.createTestCase(7, 7, 1, 3, true, false, false, false, false, true, true, false),
                TestUtils.createTestCase(7, 7, 2, 4, false, true, true, true, true, true, false, false),
                TestUtils.createTestCase(7, 7, 0, 1, true, true, false, false, false, false, true, false),
                TestUtils.createTestCase(3, 4, 2, 4, true, false, true, false, true, false, true, false),
                TestUtils.createTestCase(3, 4, 0, 1, false, true, false, true, false, true, false, true),
                TestUtils.createTestCase(3, 4, 1, 1, true, false, true, false, true, false, true, false),
                TestUtils.createTestCase(3, 4, 2, 2, true, true, false, true, false, true, false, false),
                TestUtils.createTestCase(3, 4, 0, 3, false, true, true, false, true, false, true, true),
                TestUtils.createTestCase(3, 4, 1, 4, true, false, true, true, false, true, false, false),
                TestUtils.createTestCase(3, 4, 2, 1, false, true, false, true, true, false, true, true),
                TestUtils.createTestCase(3, 4, 0, 2, true, false, true, false, true, true, false, false),
                TestUtils.createTestCase(3, 4, 1, 3, false, true, false, true, false, true, true, true)
        );
    }

    /**
     * BuyRoad TCs
     * 1. brick >= 1, lumber >= 1, num roads = 15 - expecting 2 returned, same # resources, same # roads
     * 2. brick >= 1, lumber >= 1, num roads = 14 - expecting 0 returned, brick + 1, lumber + 1, roads + 1
     * 3. brick < 1, lumber >= 1, num roads = 14 - expecting 1 returned
     * 4. brick >= 1, lumber < 1, num roads = 14 - expecting 1 returned
     */
    static Stream<Arguments> buyRoadTestCases() {
        return Stream.of(
                Arguments.of(1, 1, 15, 2, 1, 1, 15),
                Arguments.of(1, 1, 14, 0, 0, 0, 15),
                Arguments.of(0, 1, 14, 1, 0, 1, 14),
                Arguments.of(1, 0, 14, 1, 1, 0, 14)
        );
    }

    /**
     * BuySettlement TCs
     * 1. brick=1, wool=1, lumber=1, grain=1, settlements=5, expected=2
     * 2. brick=1, wool=1, lumber=1, grain=1, settlements=4, expected=0
     * 3. brick=0, wool=1, lumber=1, grain=1, settlements=5, expected=1
     * 4. brick=1, wool=0, lumber=1, grain=1, settlements=5, expected=1
     * 5. brick=1, wool=1, lumber=0, grain=1, settlements=5, expected=1
     * 6. brick=1, wool=1, lumber=1, grain=0, settlements=5, expected=1
     */
    static Stream<Arguments> buySettlementTestCases() {
        return Stream.of(
                Arguments.of(1, 1, 1, 1, 5, 2, 1, 1, 1, 1, 5),
                Arguments.of(1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 5),
                Arguments.of(0, 1, 1, 1, 4, 1, 0, 1, 1, 1, 4),
                Arguments.of(1, 0, 1, 1, 4, 1, 1, 0, 1, 1, 4),
                Arguments.of(1, 1, 0, 1, 4, 1, 1, 1, 0, 1, 4),
                Arguments.of(1, 1, 1, 0, 4, 1, 1, 1, 1, 0, 4)
        );
    }

    /**
     * BuyCity TCs
     * 1. grain=2, ore=3, cities=4 - expected=2
     * 2. grain=2, ore=3, cities=3 - expected=0
     * 3. grain=1, ore=3, cities=3 - expected=1
     * 4. grain=2, ore=2, cities=3 - expected=1
     */
    static Stream<Arguments> buyCityTestCases() {
        return Stream.of(
                Arguments.of(2, 3, 4, 2, 2, 3, 4),
                Arguments.of(2, 3, 3, 0, 0, 0, 4),
                Arguments.of(1, 3, 3, 1, 1, 3, 3),
                Arguments.of(2, 2, 3, 1, 2, 2, 3)
        );
    }

    static Stream<Arguments> halfCardsTestCases() {
        return Stream.of(
                Arguments.of(List.of(2, 2, 1, 0, 1), List.of(0, 2, 1, 2, 1), List.of(0, 2, 0, 2, 1), List.of(0, 1, 0, 2, 0)),
                Arguments.of(List.of(2, 0, 2, 1, 2), List.of(1, 0, 2, 0, 2), List.of(1, 0, 1, 0, 2), List.of(0, 2, 1, 0, 1)),
                Arguments.of(List.of(2, 1, 0, 2, 0), List.of(2, 1, 0, 1, 0), List.of(2, 0, 2, 1, 0), List.of(1, 0, 2, 1, 2)),
                Arguments.of(List.of(2, 2, 1, 0, 1), List.of(0, 2, 0, 2, 1), List.of(0, 1, 0, 2, 1), List.of(2, 1, 0, 2, 0)),
                Arguments.of(List.of(2, 1, 0, 2, 0), List.of(2, 1, 0, 1, 0), List.of(2, 1, 2, 1, 0), List.of(2, 0, 2, 1, 0)),
                Arguments.of(List.of(2, 1, 0, 1, 0), List.of(1, 0, 2, 0, 2), List.of(0, 2, 0, 2, 1), List.of(2, 1, 2, 1, 0)),
                Arguments.of(List.of(0, 1, 0, 0, 0), List.of(2, 2, 1, 1, 0), List.of(0, 2, 2, 1, 1), List.of(0, 0, 2, 2, 1)),
                Arguments.of(List.of(0, 2, 1, 1, 0), List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 2, 2), List.of(1, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 0, 2), List.of(2, 1, 1, 0, 0), List.of(2, 2, 1, 1, 0)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(2, 1, 1, 0, 0), List.of(0, 2, 2, 1, 1), List.of(0, 0, 2, 2, 1)),
                Arguments.of(List.of(0, 2, 1, 1, 0), List.of(0, 2, 2, 1, 1), List.of(0, 0, 0, 2, 2), List.of(1, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 2, 2), List.of(1, 1, 0, 0, 0), List.of(2, 2, 1, 1, 0)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(2, 1, 1, 0, 0), List.of(2, 2, 1, 1, 0), List.of(0, 0, 2, 2, 1)),
                Arguments.of(List.of(0, 2, 1, 1, 0), List.of(0, 2, 2, 1, 1), List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 0, 2)),
                Arguments.of(List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 2, 2), List.of(1, 1, 0, 0, 2), List.of(2, 1, 1, 0, 0)),
                Arguments.of(List.of(0, 0, 0, 0, 2), List.of(2, 1, 1, 0, 0), List.of(2, 2, 1, 1, 0), List.of(0, 2, 2, 1, 1)),
                Arguments.of(List.of(0, 1, 1, 0, 0), List.of(2, 2, 1, 1, 0), List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 2, 2)),
                Arguments.of(List.of(0, 2, 2, 1, 1), List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 0, 2), List.of(2, 1, 1, 0, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 2), List.of(1, 1, 0, 0, 2), List.of(2, 1, 1, 0, 0), List.of(0, 2, 2, 1, 1)),
                Arguments.of(List.of(0, 2, 2, 1, 1), List.of(0, 0, 2, 2, 1), List.of(1, 0, 0, 2, 2), List.of(1, 1, 0, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 2, 2), List.of(0, 0, 1, 1, 2), List.of(2, 0, 0, 1, 1), List.of(2, 2, 0, 0, 0)),
                Arguments.of(List.of(1, 2, 2, 0, 0), List.of(1, 1, 2, 2, 0), List.of(0, 1, 1, 2, 2), List.of(0, 0, 0, 1, 1)),
                Arguments.of(List.of(1, 0, 0, 1, 1), List.of(2, 2, 0, 0, 1), List.of(1, 2, 2, 0, 0), List.of(0, 1, 1, 2, 2)),
                Arguments.of(List.of(1, 1, 1, 2, 2), List.of(0, 0, 1, 1, 2), List.of(2, 0, 0, 0, 1), List.of(1, 2, 2, 0, 0)),
                Arguments.of(List.of(1, 2, 2, 0, 0), List.of(1, 1, 2, 2, 0), List.of(0, 0, 1, 1, 2), List.of(2, 0, 0, 1, 1)),
                Arguments.of(List.of(1, 0, 0, 1, 1), List.of(2, 2, 0, 0, 0), List.of(1, 1, 2, 2, 0), List.of(0, 1, 1, 2, 2)),
                Arguments.of(List.of(1, 1, 1, 2, 2), List.of(0, 0, 0, 1, 1), List.of(2, 2, 0, 0, 1), List.of(1, 2, 2, 0, 0)),
                Arguments.of(List.of(1, 2, 2, 0, 0), List.of(0, 1, 1, 2, 2), List.of(0, 0, 1, 1, 2), List.of(2, 0, 0, 1, 1)),
                Arguments.of(List.of(1, 0, 0, 0, 1), List.of(1, 2, 2, 0, 0), List.of(1, 1, 2, 2, 0), List.of(0, 1, 1, 2, 2)),
                Arguments.of(List.of(1, 0, 1, 1, 2), List.of(2, 0, 0, 1, 1), List.of(2, 2, 0, 0, 1), List.of(1, 2, 2, 0, 0)),
                Arguments.of(List.of(1, 1, 2, 2, 0), List.of(0, 1, 1, 2, 2), List.of(0, 0, 1, 1, 2), List.of(2, 0, 0, 0, 1)),
                Arguments.of(List.of(1, 2, 0, 0, 1), List.of(1, 2, 2, 0, 0), List.of(1, 1, 2, 2, 0), List.of(0, 0, 1, 1, 2)),
                Arguments.of(List.of(1, 0, 1, 1, 2), List.of(2, 0, 0, 1, 1), List.of(2, 2, 0, 0, 0), List.of(1, 1, 2, 2, 0)),
                Arguments.of(List.of(1, 1, 2, 2, 0), List.of(0, 1, 1, 2, 2), List.of(0, 0, 0, 1, 1), List.of(2, 2, 0, 0, 1)),
                Arguments.of(List.of(1, 2, 0, 0, 1), List.of(1, 2, 2, 0, 0), List.of(0, 1, 1, 2, 2), List.of(0, 0, 1, 1, 2)),
                Arguments.of(List.of(1, 0, 1, 1, 2), List.of(2, 0, 0, 0, 1), List.of(1, 2, 2, 0, 0), List.of(1, 1, 2, 2, 0)),
                Arguments.of(List.of(1, 1, 2, 2, 0), List.of(0, 0, 1, 1, 2), List.of(2, 0, 0, 1, 1), List.of(2, 2, 0, 0, 1)),
                Arguments.of(List.of(1, 2, 0, 0, 0), List.of(1, 1, 2, 2, 0), List.of(0, 1, 1, 2, 2), List.of(0, 0, 1, 1, 2)),
                Arguments.of(List.of(1, 0, 0, 1, 1), List.of(2, 2, 0, 0, 1), List.of(1, 2, 2, 0, 0), List.of(1, 1, 2, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 2, 0), List.of(2, 0, 1, 0, 1), List.of(0, 1, 0, 1, 2), List.of(1, 2, 1, 2, 0)),
                Arguments.of(List.of(2, 0, 1, 0, 1), List.of(0, 1, 2, 1, 2), List.of(1, 2, 0, 2, 0), List.of(2, 0, 2, 0, 1)),
                Arguments.of(List.of(2, 1, 2, 1, 2), List.of(0, 2, 0, 2, 0), List.of(2, 0, 1, 0, 1), List.of(0, 1, 0, 1, 2)),
                Arguments.of(List.of(2, 2, 0, 2, 0), List.of(1, 0, 1, 0, 1), List.of(0, 1, 2, 1, 2), List.of(1, 2, 0, 2, 0)),
                Arguments.of(List.of(2, 0, 1, 0, 1), List.of(2, 1, 2, 1, 2), List.of(0, 2, 0, 2, 0), List.of(2, 0, 1, 0, 1)),
                Arguments.of(List.of(2, 1, 2, 0, 2), List.of(0, 2, 0, 2, 0), List.of(1, 0, 1, 0, 1), List.of(0, 1, 2, 1, 2)),
                Arguments.of(List.of(2, 2, 0, 1, 0), List.of(1, 0, 1, 0, 1), List.of(2, 1, 2, 1, 2), List.of(0, 2, 0, 2, 0)),
                Arguments.of(List.of(2, 0, 1, 2, 1), List.of(2, 1, 2, 0, 2), List.of(0, 2, 0, 2, 0), List.of(1, 0, 1, 0, 1)),
                Arguments.of(List.of(2, 0, 2, 0, 2), List.of(0, 2, 0, 1, 0), List.of(1, 0, 1, 0, 1), List.of(2, 1, 2, 1, 2)),
                Arguments.of(List.of(2, 1, 0, 1, 0), List.of(1, 0, 1, 2, 1), List.of(2, 1, 2, 0, 2), List.of(0, 2, 0, 2, 0)),
                Arguments.of(List.of(2, 2, 1, 2, 1), List.of(2, 0, 2, 0, 2), List.of(0, 2, 0, 1, 0), List.of(1, 0, 1, 0, 1)),
                Arguments.of(List.of(2, 0, 2, 0, 2), List.of(0, 1, 0, 1, 0), List.of(1, 0, 1, 2, 1), List.of(2, 1, 2, 0, 2)),
                Arguments.of(List.of(2, 1, 0, 1, 0), List.of(1, 2, 1, 2, 1), List.of(2, 0, 2, 0, 2), List.of(0, 2, 0, 1, 0)),
                Arguments.of(List.of(2, 2, 1, 2, 0), List.of(2, 0, 2, 0, 2), List.of(0, 1, 0, 1, 0), List.of(1, 0, 1, 2, 1)),
                Arguments.of(List.of(2, 0, 2, 0, 1), List.of(0, 1, 0, 1, 0), List.of(1, 2, 1, 2, 1), List.of(2, 0, 2, 0, 2)),
                Arguments.of(List.of(2, 1, 0, 1, 2), List.of(1, 2, 1, 2, 0), List.of(2, 0, 2, 0, 2), List.of(0, 1, 0, 1, 0)),
                Arguments.of(List.of(2, 2, 0, 2, 0), List.of(2, 0, 2, 0, 1), List.of(0, 1, 0, 1, 0), List.of(1, 2, 1, 2, 1)),
                Arguments.of(List.of(2, 0, 1, 0, 1), List.of(0, 1, 0, 1, 2), List.of(1, 2, 1, 2, 0), List.of(2, 0, 2, 0, 2)),
                Arguments.of(List.of(2, 1, 2, 1, 2), List.of(1, 2, 0, 2, 0), List.of(2, 0, 2, 0, 1), List.of(0, 1, 0, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 2, 1), List.of(0, 0, 2, 1, 1), List.of(0, 0, 2, 1, 1), List.of(0, 2, 2, 1, 0)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(1, 1, 0, 2, 2), List.of(1, 0, 0, 2, 2), List.of(1, 0, 0, 2, 1)),
                Arguments.of(List.of(0, 2, 1, 0, 0), List.of(2, 2, 1, 0, 0), List.of(2, 1, 1, 0, 0), List.of(2, 1, 1, 0, 2)),
                Arguments.of(List.of(0, 0, 2, 1, 1), List.of(0, 0, 2, 1, 1), List.of(0, 2, 2, 1, 0), List.of(0, 2, 2, 1, 0)),
                Arguments.of(List.of(0, 1, 0, 2, 2), List.of(1, 0, 0, 2, 2), List.of(1, 0, 0, 2, 1), List.of(1, 0, 0, 2, 1)),
                Arguments.of(List.of(0, 2, 1, 0, 0), List.of(2, 1, 1, 0, 0), List.of(2, 1, 1, 0, 2), List.of(2, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 0, 2, 1, 1), List.of(0, 2, 2, 1, 0), List.of(0, 2, 2, 1, 0), List.of(0, 2, 1, 1, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 2), List.of(1, 0, 0, 2, 1), List.of(1, 0, 0, 2, 1), List.of(1, 0, 2, 2, 1)),
                Arguments.of(List.of(0, 1, 1, 0, 0), List.of(2, 1, 1, 0, 2), List.of(2, 1, 0, 0, 2), List.of(2, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 2, 2, 1, 0), List.of(0, 2, 2, 1, 0), List.of(0, 2, 1, 1, 0), List.of(0, 2, 1, 1, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 1), List.of(1, 0, 0, 2, 1), List.of(1, 0, 2, 2, 1), List.of(0, 0, 2, 2, 1)),
                Arguments.of(List.of(0, 1, 1, 0, 2), List.of(2, 1, 0, 0, 2), List.of(2, 1, 0, 0, 2), List.of(1, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 2, 2, 1, 0), List.of(0, 2, 1, 1, 0), List.of(0, 2, 1, 1, 0), List.of(2, 2, 1, 0, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 1), List.of(1, 0, 2, 2, 1), List.of(0, 0, 2, 2, 1), List.of(0, 0, 2, 1, 1)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(2, 1, 0, 0, 2), List.of(1, 1, 0, 0, 2), List.of(1, 1, 0, 2, 2)),
                Arguments.of(List.of(0, 2, 1, 1, 0), List.of(0, 2, 1, 1, 0), List.of(2, 2, 1, 0, 0), List.of(2, 2, 1, 0, 0)),
                Arguments.of(List.of(0, 0, 2, 2, 1), List.of(0, 0, 2, 2, 1), List.of(0, 0, 2, 1, 1), List.of(0, 0, 2, 1, 1)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(1, 1, 0, 0, 2), List.of(1, 1, 0, 2, 2), List.of(1, 0, 0, 2, 2)),
                Arguments.of(List.of(0, 2, 1, 1, 0), List.of(2, 2, 1, 0, 0), List.of(2, 2, 1, 0, 0), List.of(2, 1, 1, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 1, 2), List.of(2, 2, 0, 0, 0), List.of(1, 1, 1, 2, 2), List.of(2, 0, 0, 0, 0)),
                Arguments.of(List.of(1, 2, 2, 2, 0), List.of(0, 0, 1, 1, 1), List.of(2, 2, 2, 0, 0), List.of(0, 0, 1, 1, 1)),
                Arguments.of(List.of(1, 0, 0, 0, 1), List.of(1, 1, 2, 2, 2), List.of(0, 0, 0, 0, 1), List.of(1, 1, 2, 2, 2)),
                Arguments.of(List.of(1, 1, 1, 1, 2), List.of(2, 2, 0, 0, 0), List.of(0, 1, 1, 1, 2), List.of(2, 2, 0, 0, 0)),
                Arguments.of(List.of(1, 2, 2, 2, 0), List.of(0, 0, 0, 1, 1), List.of(1, 2, 2, 2, 0), List.of(0, 0, 1, 1, 1)),
                Arguments.of(List.of(1, 0, 0, 0, 0), List.of(1, 1, 1, 2, 2), List.of(2, 0, 0, 0, 1), List.of(1, 1, 2, 2, 2)),
                Arguments.of(List.of(1, 0, 1, 1, 1), List.of(2, 2, 2, 0, 0), List.of(0, 1, 1, 1, 2), List.of(2, 2, 0, 0, 0)),
                Arguments.of(List.of(1, 1, 2, 2, 2), List.of(0, 0, 0, 1, 1), List.of(1, 2, 2, 2, 0), List.of(0, 0, 0, 1, 1)),
                Arguments.of(List.of(1, 2, 0, 0, 0), List.of(1, 1, 1, 2, 2), List.of(2, 0, 0, 0, 0), List.of(1, 1, 1, 2, 2)),
                Arguments.of(List.of(1, 0, 1, 1, 1), List.of(2, 2, 2, 0, 0), List.of(0, 0, 1, 1, 1), List.of(2, 2, 2, 0, 0)),
                Arguments.of(List.of(1, 1, 2, 2, 2), List.of(0, 0, 0, 0, 1), List.of(1, 1, 2, 2, 2), List.of(0, 0, 0, 1, 1)),
                Arguments.of(List.of(1, 2, 0, 0, 0), List.of(0, 1, 1, 1, 2), List.of(2, 2, 0, 0, 0), List.of(1, 1, 1, 2, 2)),
                Arguments.of(List.of(1, 0, 0, 1, 1), List.of(1, 2, 2, 2, 0), List.of(0, 0, 1, 1, 1), List.of(2, 2, 2, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 2, 2), List.of(2, 0, 0, 0, 1), List.of(1, 1, 2, 2, 2), List.of(0, 0, 0, 0, 1)),
                Arguments.of(List.of(1, 2, 2, 0, 0), List.of(0, 1, 1, 1, 2), List.of(2, 2, 0, 0, 0), List.of(0, 1, 1, 1, 2)),
                Arguments.of(List.of(1, 0, 0, 1, 1), List.of(1, 2, 2, 2, 0), List.of(0, 0, 0, 1, 1), List.of(1, 2, 2, 2, 0)),
                Arguments.of(List.of(1, 1, 1, 2, 2), List.of(2, 0, 0, 0, 0), List.of(1, 1, 1, 2, 2), List.of(2, 0, 0, 0, 1)),
                Arguments.of(List.of(1, 2, 2, 0, 0), List.of(0, 0, 1, 1, 1), List.of(2, 2, 2, 0, 0), List.of(0, 1, 1, 1, 2)),
                Arguments.of(List.of(1, 0, 0, 0, 1), List.of(1, 1, 2, 2, 2), List.of(0, 0, 0, 1, 1), List.of(1, 2, 2, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 0), List.of(1, 2, 0, 2, 0), List.of(1, 2, 1, 2, 0), List.of(1, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(2, 0, 1, 0, 1), List.of(2, 0, 2, 0, 1), List.of(2, 1, 2, 0, 1)),
                Arguments.of(List.of(2, 1, 2, 0, 1), List.of(0, 1, 2, 0, 2), List.of(0, 1, 0, 1, 2), List.of(0, 2, 0, 1, 2)),
                Arguments.of(List.of(2, 2, 0, 1, 2), List.of(1, 2, 0, 1, 0), List.of(1, 2, 0, 2, 0), List.of(1, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(2, 0, 1, 2, 1), List.of(2, 0, 1, 0, 1), List.of(2, 0, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 2, 0, 1), List.of(0, 1, 2, 0, 2), List.of(0, 1, 2, 1, 2), List.of(0, 1, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 0, 1, 2), List.of(0, 2, 0, 1, 0), List.of(1, 2, 0, 2, 0), List.of(1, 2, 1, 2, 0)),
                Arguments.of(List.of(2, 2, 1, 2, 0), List.of(1, 0, 1, 2, 0), List.of(2, 0, 1, 0, 1), List.of(2, 0, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 2, 0, 1), List.of(2, 1, 2, 0, 1), List.of(0, 1, 2, 0, 2), List.of(0, 1, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 0, 1, 2), List.of(0, 2, 0, 1, 2), List.of(1, 2, 0, 1, 0), List.of(1, 2, 0, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 2, 0), List.of(1, 0, 1, 2, 0), List.of(2, 0, 1, 2, 1), List.of(2, 0, 1, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 0, 1), List.of(2, 0, 2, 0, 1), List.of(0, 1, 2, 0, 2), List.of(0, 1, 2, 1, 2)),
                Arguments.of(List.of(2, 1, 2, 1, 2), List.of(0, 1, 0, 1, 2), List.of(0, 2, 0, 1, 0), List.of(1, 2, 0, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 2, 0), List.of(1, 2, 1, 2, 0), List.of(1, 0, 1, 2, 0), List.of(2, 0, 1, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 0, 1), List.of(2, 0, 2, 0, 1), List.of(2, 1, 2, 0, 1), List.of(0, 1, 2, 0, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 2), List.of(0, 1, 0, 1, 2), List.of(0, 2, 0, 1, 2), List.of(1, 2, 0, 1, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 0), List.of(1, 2, 0, 2, 0), List.of(1, 0, 1, 2, 0), List.of(2, 0, 1, 2, 1)),
                Arguments.of(List.of(2, 0, 1, 2, 1), List.of(2, 0, 1, 0, 1), List.of(2, 0, 2, 0, 1), List.of(0, 1, 2, 0, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 2), List.of(0, 1, 2, 1, 2), List.of(0, 1, 0, 1, 2), List.of(0, 2, 0, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(0, 2, 1, 0, 2), List.of(2, 1, 0, 2, 1), List.of(1, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(0, 0, 2, 1, 0), List.of(0, 2, 1, 0, 2), List.of(2, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(1, 1, 0, 2, 1), List.of(0, 0, 2, 1, 0), List.of(0, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(2, 2, 1, 0, 2), List.of(1, 1, 0, 2, 1), List.of(0, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 1), List.of(0, 0, 2, 1, 0), List.of(2, 2, 1, 0, 2), List.of(1, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 1, 0, 2), List.of(1, 0, 0, 2, 1), List.of(0, 0, 2, 1, 0), List.of(2, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 2, 1, 0), List.of(2, 1, 1, 0, 2), List.of(1, 0, 0, 2, 1), List.of(0, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 1), List.of(0, 2, 2, 1, 0), List.of(2, 1, 1, 0, 2), List.of(1, 0, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(1, 0, 0, 2, 1), List.of(0, 2, 2, 1, 0), List.of(2, 1, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 1, 0), List.of(2, 1, 0, 0, 2), List.of(1, 0, 0, 2, 1), List.of(0, 2, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 2, 1), List.of(0, 2, 1, 1, 0), List.of(2, 1, 0, 0, 2), List.of(1, 0, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(1, 0, 2, 2, 1), List.of(0, 2, 1, 1, 0), List.of(2, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 0, 2), List.of(1, 0, 2, 2, 1), List.of(0, 2, 1, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 1), List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 0, 2), List.of(1, 0, 2, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 2), List.of(1, 0, 2, 1, 1), List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 2, 2), List.of(1, 0, 2, 1, 1), List.of(0, 2, 1, 0, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 2, 2), List.of(1, 0, 2, 1, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(1, 0, 2, 1, 0), List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 2, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(2, 1, 0, 2, 1), List.of(1, 0, 2, 1, 0), List.of(0, 2, 1, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 1, 1), List.of(1, 1, 2, 2, 2), List.of(2, 2, 2, 0, 0), List.of(0, 0, 0, 0, 0)),
                Arguments.of(List.of(1, 2, 2, 2, 2), List.of(2, 2, 0, 0, 0), List.of(0, 0, 0, 0, 1), List.of(1, 1, 1, 1, 1)),
                Arguments.of(List.of(1, 0, 0, 0, 0), List.of(0, 0, 0, 1, 1), List.of(1, 1, 1, 1, 2), List.of(2, 2, 2, 2, 2)),
                Arguments.of(List.of(1, 0, 1, 1, 1), List.of(1, 1, 1, 2, 2), List.of(2, 2, 2, 2, 0), List.of(0, 0, 0, 0, 0)),
                Arguments.of(List.of(1, 1, 2, 2, 2), List.of(2, 2, 2, 0, 0), List.of(0, 0, 0, 0, 0), List.of(1, 1, 1, 1, 1)),
                Arguments.of(List.of(1, 2, 0, 0, 0), List.of(0, 0, 0, 0, 1), List.of(1, 1, 1, 1, 1), List.of(2, 2, 2, 2, 2)),
                Arguments.of(List.of(1, 0, 0, 1, 1), List.of(1, 1, 1, 1, 2), List.of(2, 2, 2, 2, 2), List.of(0, 0, 0, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 2, 2), List.of(2, 2, 2, 2, 0), List.of(0, 0, 0, 0, 0), List.of(0, 1, 1, 1, 1)),
                Arguments.of(List.of(1, 2, 2, 0, 0), List.of(0, 0, 0, 0, 0), List.of(1, 1, 1, 1, 1), List.of(1, 2, 2, 2, 2)),
                Arguments.of(List.of(1, 0, 0, 0, 1), List.of(1, 1, 1, 1, 1), List.of(2, 2, 2, 2, 2), List.of(2, 0, 0, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 1, 2), List.of(2, 2, 2, 2, 2), List.of(0, 0, 0, 0, 0), List.of(0, 0, 1, 1, 1)),
                Arguments.of(List.of(1, 2, 2, 2, 0), List.of(0, 0, 0, 0, 0), List.of(0, 1, 1, 1, 1), List.of(1, 1, 2, 2, 2)),
                Arguments.of(List.of(1, 0, 0, 0, 0), List.of(1, 1, 1, 1, 1), List.of(1, 2, 2, 2, 2), List.of(2, 2, 0, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 1, 1), List.of(2, 2, 2, 2, 2), List.of(2, 0, 0, 0, 0), List.of(0, 0, 0, 1, 1)),
                Arguments.of(List.of(1, 2, 2, 2, 2), List.of(0, 0, 0, 0, 0), List.of(0, 0, 1, 1, 1), List.of(1, 1, 1, 2, 2)),
                Arguments.of(List.of(1, 0, 0, 0, 0), List.of(0, 1, 1, 1, 1), List.of(1, 1, 2, 2, 2), List.of(2, 2, 2, 0, 0)),
                Arguments.of(List.of(1, 1, 1, 1, 1), List.of(1, 2, 2, 2, 2), List.of(2, 2, 0, 0, 0), List.of(0, 0, 0, 0, 1)),
                Arguments.of(List.of(1, 2, 2, 2, 2), List.of(2, 0, 0, 0, 0), List.of(0, 0, 0, 1, 1), List.of(1, 1, 1, 1, 2)),
                Arguments.of(List.of(1, 0, 0, 0, 0), List.of(0, 0, 1, 1, 1), List.of(1, 1, 1, 2, 2), List.of(2, 2, 2, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 2), List.of(0, 1, 2, 0, 1), List.of(0, 1, 2, 0, 1), List.of(2, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 1, 2), List.of(0, 2, 0, 1, 2), List.of(0, 1, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 2, 0, 1), List.of(2, 0, 1, 2, 0), List.of(1, 0, 1, 2, 0), List.of(1, 2, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 0, 1, 2), List.of(0, 1, 2, 0, 1), List.of(2, 0, 2, 0, 1), List.of(2, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 2, 0), List.of(1, 2, 0, 1, 2), List.of(0, 1, 0, 1, 2), List.of(0, 1, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 0, 1), List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 2, 0), List.of(1, 2, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 2), List.of(0, 1, 2, 0, 1), List.of(2, 0, 1, 0, 1), List.of(2, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 0), List.of(1, 2, 0, 1, 2), List.of(0, 1, 2, 0, 2), List.of(0, 1, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 1, 0), List.of(1, 2, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 1), List.of(0, 1, 2, 0, 1), List.of(2, 0, 1, 2, 0), List.of(2, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 2), List.of(0, 2, 0, 1, 2), List.of(0, 1, 2, 0, 1), List.of(0, 1, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(1, 0, 1, 2, 0), List.of(1, 2, 0, 1, 2), List.of(0, 2, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 1), List.of(2, 0, 2, 0, 1), List.of(2, 0, 1, 2, 0), List.of(1, 0, 1, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 2), List.of(0, 1, 0, 1, 2), List.of(0, 1, 2, 0, 1), List.of(2, 0, 2, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 2, 0), List.of(1, 2, 0, 1, 2), List.of(0, 1, 0, 1, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 1), List.of(2, 0, 1, 0, 1), List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 2, 0)),
                Arguments.of(List.of(2, 2, 0, 1, 2), List.of(0, 1, 2, 0, 2), List.of(0, 1, 2, 0, 1), List.of(2, 0, 1, 0, 1)),
                Arguments.of(List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 1, 0), List.of(1, 2, 0, 1, 2), List.of(0, 1, 2, 0, 2)),
                Arguments.of(List.of(2, 1, 2, 0, 1), List.of(2, 0, 1, 2, 0), List.of(2, 0, 1, 2, 0), List.of(1, 2, 0, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(1, 0, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 0, 2, 1), List.of(0, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 0, 2), List.of(1, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 0), List.of(2, 1, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(0, 2, 1, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 0, 2, 1, 0)),
                Arguments.of(List.of(0, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 0, 2, 1)),
                Arguments.of(List.of(0, 1, 0, 2, 1), List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 0, 2)),
                Arguments.of(List.of(0, 2, 1, 0, 2), List.of(1, 0, 2, 1, 0), List.of(2, 1, 0, 2, 1), List.of(0, 2, 1, 0, 0))
        );
    }



}
